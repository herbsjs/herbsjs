"use strict";(self.webpackChunkherbjs_website=self.webpackChunkherbjs_website||[]).push([[7480],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return d}});var r=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),m=u(n),d=i,h=m["".concat(l,".").concat(d)]||m[d]||p[d]||a;return n?r.createElement(h,s(s({ref:t},c),{},{components:n})):r.createElement(h,s({ref:t},c))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,s=new Array(a);s[0]=m;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:i,s[1]=o;for(var u=2;u<a;u++)s[u]=n[u];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},69766:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return l},default:function(){return d},frontMatter:function(){return o},metadata:function(){return u},toc:function(){return p}});var r=n(87462),i=n(63366),a=(n(67294),n(3905)),s=["components"],o={id:"working-with-herbarium",title:"Working with Herbarium",sidebar_label:"Working with Herbarium",slug:"/herbarium/working-with-herbarium"},l=void 0,u={unversionedId:"herbarium/working-with-herbarium",id:"herbarium/working-with-herbarium",title:"Working with Herbarium",description:"Herbarium",source:"@site/docs/herbarium/working-with-herbarium.md",sourceDirName:"herbarium",slug:"/herbarium/working-with-herbarium",permalink:"/docs/herbarium/working-with-herbarium",editUrl:"https://github.com/herbsjs/herbsjs.github.io/blob/master/docs/herbarium/working-with-herbarium.md",tags:[],version:"current",frontMatter:{id:"working-with-herbarium",title:"Working with Herbarium",sidebar_label:"Working with Herbarium",slug:"/herbarium/working-with-herbarium"},sidebar:"sidebar",previous:{title:"Code Snippets",permalink:"/docs/glues/herbs-snippets"}},c={},p=[{value:"Herbarium",id:"herbarium",level:3},{value:"Installing",id:"installing",level:3},{value:"Initializing",id:"initializing",level:3},{value:"Adding Objects and Metadata",id:"adding-objects-and-metadata",level:3},{value:"Entities",id:"entities",level:4},{value:"Use Cases",id:"use-cases",level:4},{value:"Repository",id:"repository",level:4},{value:"Consuming Objects",id:"consuming-objects",level:3},{value:"All",id:"all",level:4},{value:"findBy",id:"findby",level:4},{value:"get by id",id:"get-by-id",level:4}],m={toc:p};function d(e){var t=e.components,n=(0,i.Z)(e,s);return(0,a.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h3",{id:"herbarium"},"Herbarium"),(0,a.kt)("p",null,"Herbarium is a centralized and standardized repository and discovery service for Herbs objects (entities, use cases, repositories) allowing glues (ex: Herbs Shelf, herbs2rest, herbs2gql, herbs2knex, etc) to access, explore and find these objects."),(0,a.kt)("h3",{id:"installing"},"Installing"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"$ npm install @herbsjs/herbarium\n")),(0,a.kt)("h3",{id:"initializing"},"Initializing"),(0,a.kt)("p",null,"To start using Herbarium it is necessary to load all the objects in the project."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"const { herbarium } = require('@herbs/herbarium')\nherbarium.requireAll(options)\n")),(0,a.kt)("p",null,"This will find and require() all entities, use cases and repositories files. If these files are using Herbarium, it will load all the objects to be used later."),(0,a.kt)("p",null,"You can check which files were found within the ",(0,a.kt)("inlineCode",{parentName:"p"},"herbarium.requireAll(options)")," method using:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"const { herbarium } = require('@herbs/herbarium')\nconst retqAll = herbarium.requireAll(options)\n\n/* Will return an object of array of files founded\n {\n   entities:[],\n   usecases\":[],\n   repositories:[]\n  }\n*/\n")),(0,a.kt)("p",null," You can use advanced options off ",(0,a.kt)("inlineCode",{parentName:"p"},"requireAll()")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"options"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"initialPath"),": (optional) default ",(0,a.kt)("inlineCode",{parentName:"li"},"process.cwd()")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"avoidFiles"),": (optional) default ",(0,a.kt)("inlineCode",{parentName:"li"},"(fileName) => (fileName.includes('.spec.js') || fileName.includes('.test.js') ? false : fileName)")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"onlySpecs"),": (optional) default ",(0,a.kt)("inlineCode",{parentName:"li"},"(fileName) => (fileName.includes('.spec.js') ? fileName : false)")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"entitiesPath"),": (optional) default ",(0,a.kt)("inlineCode",{parentName:"li"},"/src/domain/entities")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"usecasesPath"),": (optional) default ",(0,a.kt)("inlineCode",{parentName:"li"},"/src/domain/usecases")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"specPath"),": (optional) default ",(0,a.kt)("inlineCode",{parentName:"li"},"/src/domain/")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"repositoriesPath"),": (optional) default ",(0,a.kt)("inlineCode",{parentName:"li"},"/src/infra/repositories"))),(0,a.kt)("h3",{id:"adding-objects-and-metadata"},"Adding Objects and Metadata"),(0,a.kt)("h4",{id:"entities"},"Entities"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"// src/domain/entities/item.js\nconst { entity, field } = require('@herbsjs/herbs')\nconst { herbarium } = require('@herbsjs/herbarium')\n\nconst Item =\n    entity('Item', {\n        ...\n    })\n\nmodule.exports =\n    herbarium.entities\n        .add(Item, 'Item')\n        .entity\n")),(0,a.kt)("p",null,"The second parameter of the ",(0,a.kt)("inlineCode",{parentName:"p"},"herbarium.entities.add")," function is the entity id for herbarium. It is optional and if none is provided, it uses the entity name (",(0,a.kt)("inlineCode",{parentName:"p"},"Item"),")."),(0,a.kt)("h4",{id:"use-cases"},"Use Cases"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"// src/domain/usecases/item/createItem.js\nconst { usecase } = require('@herbsjs/herbs')\nconst { herbarium } = require('@herbsjs/herbarium')\nconst { Item } = require('../entities/item')\n\nconst createItem = (injection) =>\n    usecase('Create Item', {\n        ...\n    })\n\nmodule.exports =\n    herbarium.usecases\n        .add(createItem, 'CreateItem')\n        .metadata({ group: 'Items', operation: herbarium.crud.create, entity: Item })\n        .usecase\n")),(0,a.kt)("p",null,"The second parameter of the ",(0,a.kt)("inlineCode",{parentName:"p"},"herbarium.usecases.add")," function is the usecase id for herbarium. It is optional and if none is provided, it uses the usecase description (",(0,a.kt)("inlineCode",{parentName:"p"},"Create Item"),")."),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"Specs")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"// src/domain/usecases/createItem.spec.js\nconst { spec, scenario, given, check } = require('@herbsjs/aloe')\n\nconst createItemSpec = spec({ \n    ...\n    })\n\nmodule.exports =\n    herbarium.specs\n        .add(createItemSpec, 'CreateItemSpec')\n        .spec\n")),(0,a.kt)("p",null,"The second parameter of the ",(0,a.kt)("inlineCode",{parentName:"p"},"herbarium.specs.add")," function is the entity id for herbarium."),(0,a.kt)("h4",{id:"repository"},"Repository"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"const { herbarium } = require('@herbsjs/herbarium')\nconst { Repository } = require(\"@herbsjs/herbs2knex\")\nconst { Item } = require('../../../domain/entities/item')\n\nclass ItemRepository extends Repository {\n    constructor(injection) {\n        ...\n    }\n}\n\nmodule.exports =\n    herbarium.repositories\n        .add(ItemRepository, 'ItemRepository')\n        .metadata({ entity: Item })\n        .repository\n")),(0,a.kt)("p",null,"The second parameter of the ",(0,a.kt)("inlineCode",{parentName:"p"},"herbarium.repositories.add")," function is the repository id for herbarium. It is optional and if none is provided, it uses the repository class name (",(0,a.kt)("inlineCode",{parentName:"p"},"ItemRepository"),")."),(0,a.kt)("h3",{id:"consuming-objects"},"Consuming Objects"),(0,a.kt)("h4",{id:"all"},"All"),(0,a.kt)("p",null,"Returns all objects of a given type."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"const entities = herbarium.entities.all\nconst usecases = herbarium.usecases.all\nconst repositories = herbarium.repositories.all\n")),(0,a.kt)("h4",{id:"findby"},"findBy"),(0,a.kt)("p",null,"All operations you can do on any data can be boiled down to Create, Read, Update, and Delete (CRUD). You can create something new, you can read it, update it, and finally delete it if you wish. For that, you can assign the property that best fits your use case and then filter it through the method findBy()"),(0,a.kt)("p",null,"To find entities that matched by the filter:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"const usecases = herbarium.usecases.findBy({\n  operation: [\n    herbarium.crud.create,\n    herbarium.crud.update,\n    herbarium.crud.delete,\n  ],\n})\n")),(0,a.kt)("h4",{id:"get-by-id"},"get by id"),(0,a.kt)("p",null,"To find entities by IDs."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'const entity = herbarium.entities.get(1)\nconst usecase = herbarium.usecases.get("a")\nconst repository = herbarium.repositories.get(item)\n')))}d.isMDXComponent=!0}}]);