"use strict";(self.webpackChunkherbjs_website=self.webpackChunkherbjs_website||[]).push([[2452],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>v});var n=a(67294);function l(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function s(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function r(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?s(Object(a),!0).forEach((function(t){l(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,l=function(e,t){if(null==e)return{};var a,n,l={},s=Object.keys(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||(l[a]=e[a]);return l}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(l[a]=e[a])}return l}var o=n.createContext({}),u=function(e){var t=n.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):r(r({},t),e)),a},c=function(e){var t=u(e.components);return n.createElement(o.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,l=e.mdxType,s=e.originalType,o=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=u(a),v=l,h=d["".concat(o,".").concat(v)]||d[v]||p[v]||s;return a?n.createElement(h,r(r({ref:t},c),{},{components:a})):n.createElement(h,r({ref:t},c))}));function v(e,t){var a=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var s=a.length,r=new Array(s);r[0]=d;var i={};for(var o in t)hasOwnProperty.call(t,o)&&(i[o]=t[o]);i.originalType=e,i.mdxType="string"==typeof e?e:l,r[1]=i;for(var u=2;u<s;u++)r[u]=a[u];return n.createElement.apply(null,r)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},84769:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>o,contentTitle:()=>r,default:()=>p,frontMatter:()=>s,metadata:()=>i,toc:()=>u});var n=a(87462),l=(a(67294),a(3905));const s={id:"checkers",title:"Checkers",sidebar_label:"Checkers",slug:"/validation/checkers"},r=void 0,i={unversionedId:"validation/checkers",id:"validation/checkers",title:"Checkers",description:"Checkers allow users to validate data with simple functions",source:"@site/docs/validation/checkers.md",sourceDirName:"validation",slug:"/validation/checkers",permalink:"/docs/validation/checkers",draft:!1,editUrl:"https://github.com/herbsjs/herbsjs.github.io/blob/master/docs/validation/checkers.md",tags:[],version:"current",frontMatter:{id:"checkers",title:"Checkers",sidebar_label:"Checkers",slug:"/validation/checkers"},sidebar:"sidebar",previous:{title:"Validations",permalink:"/docs/validation/validations"},next:{title:"What's glues",permalink:"/docs/glues"}},o={},u=[{value:"isFunction",id:"isfunction",level:2},{value:"isDefined",id:"isdefined",level:2},{value:"isArray",id:"isarray",level:2},{value:"isIterable",id:"isiterable",level:2},{value:"isString",id:"isstring",level:2},{value:"isBoolean",id:"isboolean",level:2},{value:"isNumber",id:"isnumber",level:2},{value:"isDate",id:"isdate",level:2},{value:"isRegExp",id:"isregexp",level:2},{value:"isInstanceOf",id:"isinstanceof",level:2},{value:"isObject",id:"isobject",level:2},{value:"isEmpty",id:"isempty",level:2},{value:"isValidFormat",id:"isvalidformat",level:2},{value:"isValidEmail",id:"isvalidemail",level:2},{value:"isValidURL",id:"isvalidurl",level:2},{value:"isValidJavascriptIdentifier",id:"isvalidjavascriptidentifier",level:2},{value:"isTooShort",id:"istooshort",level:2},{value:"isTooLong",id:"istoolong",level:2},{value:"isWrongLength",id:"iswronglength",level:2},{value:"isEqualTo",id:"isequalto",level:2},{value:"isGreaterThan",id:"isgreaterthan",level:2},{value:"isGreaterThanOrEqualTo",id:"isgreaterthanorequalto",level:2},{value:"isLessThan",id:"islessthan",level:2},{value:"isLessThanOrEqualTo",id:"islessthanorequalto",level:2},{value:"isInteger",id:"isinteger",level:2},{value:"isBeforeThan",id:"isbeforethan",level:2},{value:"isAfterThan",id:"isafterthan",level:2},{value:"isAt",id:"isat",level:2},{value:"contains",id:"contains",level:2}],c={toc:u};function p(e){let{components:t,...a}=e;return(0,l.kt)("wrapper",(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"Checkers allow users to validate data with simple functions"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"const { checker } = require('@herbsjs/herbs')\n")),(0,l.kt)("h2",{id:"isfunction"},"isFunction"),(0,l.kt)("p",null,"Validates the the value is a function"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"function sampleFunc () {}\nconst ret = checker.isFunction(sampleFunc)\nconsole.log(ret)\n\n/* Output: true */\n")),(0,l.kt)("h2",{id:"isdefined"},"isDefined"),(0,l.kt)("p",null,"Validates if the value is different from null or undefined"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"const samples = [\n    null,\n    undefined,\n    ''\n]\nfor (const value of samples) {\n    const ret = checker.isDefined(value)\n    console.log(ret)    \n}\n\n\n/* Output: false, false, true */\n")),(0,l.kt)("h2",{id:"isarray"},"isArray"),(0,l.kt)("p",null,"Validates if the value is a array"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"const value = ['a', 'b', 'c']\nconst ret = checker.isArray(value)\nconsole.log(ret)\n\n/* Output: true */\n")),(0,l.kt)("h2",{id:"isiterable"},"isIterable"),(0,l.kt)("p",null,"Validates if the value is iterable"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"const value =  [{ name: 'jhon', age: 35},{ name: 'marie', age: 29}]\nconst ret = checker.isIterable(value)\nconsole.log(ret)\n\n/* Output: true */\n")),(0,l.kt)("h2",{id:"isstring"},"isString"),(0,l.kt)("p",null,"Validates if the value is a string"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"const value =  'herbs validators'\nconst ret = checker.isString(value)\nconsole.log(ret)\n\n/* Output: true */\n")),(0,l.kt)("h2",{id:"isboolean"},"isBoolean"),(0,l.kt)("p",null,"Validates if the value is a boolean"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"const value =  false\nconst ret = checker.isBoolean(value)\nconsole.log(ret)\n\n/* Output: true */\n")),(0,l.kt)("h2",{id:"isnumber"},"isNumber"),(0,l.kt)("p",null,"Validates if the value is a boolean"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"const value =  152\nconst ret = checker.isNumber(value)\nconsole.log(ret)\n\n/* Output: true */\n")),(0,l.kt)("h2",{id:"isdate"},"isDate"),(0,l.kt)("p",null,"Validates if the value is a date"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"const value = new Date(1900, 5, 1)\nconst ret = checker.isDate(value)\nconsole.log(ret)\n\n/* Output: true */\n")),(0,l.kt)("h2",{id:"isregexp"},"isRegExp"),(0,l.kt)("p",null,"Validates if the value is a regex expression"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"const value = /^[0-9]{8}$/\nconst ret = checker.isRegExp(value)\nconsole.log(ret)\n\n/* Output: true */\n")),(0,l.kt)("h2",{id:"isinstanceof"},"isInstanceOf"),(0,l.kt)("p",null,"Validates if the value is a instance of a defined type"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"class CustomClass {}\n\nconst value = new CustomClass()\nconst ret = checker.isInstanceOf(value, CustomClass)\nconsole.log(ret)\n\n/* Output: true */\n")),(0,l.kt)("h2",{id:"isobject"},"isObject"),(0,l.kt)("p",null,"Validates if the value is an object"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"class SampleClass {}\nconst samples = [\n    {},\n    new Object(),\n    new SampleClass(),\n    [],\n    'herbs',\n    true\n]\nfor (const value of samples) {\n    const ret = checker.isObject(value)    \n    console.log(ret)\n}\n\n/* Output: true, true, true, true, false, false */\n")),(0,l.kt)("h2",{id:"isempty"},"isEmpty"),(0,l.kt)("p",null,"Validates if the value is empty"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"const samples = [\n    '',\n    ' ',\n    [],\n    {},\n    'herbs',\n    22\n]\nfor (const value of samples) {\n    const ret = checker.isEmpty(value)\n    console.log(ret)\n}\n\n/* Output: true, true, true, true, false, false */\n")),(0,l.kt)("h2",{id:"isvalidformat"},"isValidFormat"),(0,l.kt)("p",null,"Validates a regex expression to test a value"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"const value = 45125\nconst ret = checker.isValidFormat(value, /^[0-9]{8}$/)\nconsole.log(ret)\n\n/* Output: true */\n")),(0,l.kt)("h2",{id:"isvalidemail"},"isValidEmail"),(0,l.kt)("p",null,"Validates if the value is an e-mail"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"const value = 'herbs@email.com'\nconst ret = checker.isValidEmail(value)\nconsole.log(ret)\n\n/* Output: true */\n")),(0,l.kt)("h2",{id:"isvalidurl"},"isValidURL"),(0,l.kt)("p",null,"Validates if the value is an url"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"const value = 'http://herbsjs.org'\nconst ret = checker.isValidURL(value)\nconsole.log(ret)\n\n/* Output: true */\n")),(0,l.kt)("h2",{id:"isvalidjavascriptidentifier"},"isValidJavascriptIdentifier"),(0,l.kt)("p",null,"Validates if the value is a valid javascript identifier"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"const value = 'herbs'\nconst ret = checker.isValidJavascriptIdentifier(value)\nconsole.log(ret)\n\n/* Output: true */\n")),(0,l.kt)("h2",{id:"istooshort"},"isTooShort"),(0,l.kt)("p",null,"Validates if the value is greater than a defined minimum value "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"const value = 'herbs'\nconst ret = checker.isTooShort(value, 3)\nconsole.log(ret)\n\n/* Output: true */\n")),(0,l.kt)("h2",{id:"istoolong"},"isTooLong"),(0,l.kt)("p",null,"Validates if the value is less than a defined maximum value"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"const value = 'herbs'\nconst ret = checker.isTooLong(value, 10)\nconsole.log(ret)\n\n/* Output: true */\n")),(0,l.kt)("h2",{id:"iswronglength"},"isWrongLength"),(0,l.kt)("p",null,"Validates if the value has a length equal to the defined value"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"const value = 'herbs'\nconst ret = checker.isWrongLength(value, 5)\nconsole.log(ret)\n\n/* Output: true */\n")),(0,l.kt)("h2",{id:"isequalto"},"isEqualTo"),(0,l.kt)("p",null,"Validates if the first value is equals to second value"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"const ret = checker.isEqualTo(1520, 1520)\nconsole.log(ret)\n\n/* Output: true */\n")),(0,l.kt)("h2",{id:"isgreaterthan"},"isGreaterThan"),(0,l.kt)("p",null,"Validates if the first number is greater than second number"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"const ret = checker.isGreaterThan(100, 50)\nconsole.log(ret)\n\n/* Output: true */\n")),(0,l.kt)("h2",{id:"isgreaterthanorequalto"},"isGreaterThanOrEqualTo"),(0,l.kt)("p",null,"Validates if the first number is greater than or equals to second number"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"const ret = checker.isGreaterThanOrEqualTo(100, 100)\nconsole.log(ret)\n\n/* Output: true */\n")),(0,l.kt)("h2",{id:"islessthan"},"isLessThan"),(0,l.kt)("p",null,"Validates if the first number is less than second number"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"const ret = checker.isLessThan(50, 100)\nconsole.log(ret)\n\n/* Output: true */\n")),(0,l.kt)("h2",{id:"islessthanorequalto"},"isLessThanOrEqualTo"),(0,l.kt)("p",null,"Validates if the first number is less than or equals to second number"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"const ret = checker.isLessThanOrEqualTo(100, 100)\nconsole.log(ret)\n\n/* Output: true */\n")),(0,l.kt)("h2",{id:"isinteger"},"isInteger"),(0,l.kt)("p",null,"Validates if the value is a integer number"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"const ret = checker.isInteger(10)\nconsole.log(ret)\n\n/* Output: true */\n")),(0,l.kt)("h2",{id:"isbeforethan"},"isBeforeThan"),(0,l.kt)("p",null,"Validates if the first date is before than second date"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"const ret = checker.isBeforeThan(new Date(1900, 2, 1), new Date(1991, 2, 1))\nconsole.log(ret)\n\n/* Output: true */\n")),(0,l.kt)("h2",{id:"isafterthan"},"isAfterThan"),(0,l.kt)("p",null,"Validates if the first date is before than second date"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"const ret = checker.isBeforeThan(new Date(1991, 2, 1), new Date(1900, 2, 1))\nconsole.log(ret)\n\n/* Output: true */\n")),(0,l.kt)("h2",{id:"isat"},"isAt"),(0,l.kt)("p",null,"Validates if the first date is equals to second date"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"const ret = checker.isAt(new Date(1991, 2, 1), new Date(1991, 2, 1))\nconsole.log(ret)\n\n/* Output: true */\n")),(0,l.kt)("h2",{id:"contains"},"contains"),(0,l.kt)("p",null,"Validates if the value contains in the object or array"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"const values = ['apple', 'orange']\nconst ret = checker.isAt(values, 'orange')\nconsole.log(ret)\n\n/* Output: true */\n")))}p.isMDXComponent=!0}}]);