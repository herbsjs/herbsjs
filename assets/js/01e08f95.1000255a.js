"use strict";(self.webpackChunkherbjs_website=self.webpackChunkherbjs_website||[]).push([[123],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var s=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);t&&(s=s.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,s)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,s,a=function(e,t){if(null==e)return{};var n,s,a={},i=Object.keys(e);for(s=0;s<i.length;s++)n=i[s],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(s=0;s<i.length;s++)n=i[s],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var u=s.createContext({}),l=function(e){var t=s.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},c=function(e){var t=l(e.components);return s.createElement(u.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return s.createElement(s.Fragment,{},t)}},d=s.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,u=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),d=l(n),h=a,m=d["".concat(u,".").concat(h)]||d[h]||p[h]||i;return n?s.createElement(m,r(r({ref:t},c),{},{components:n})):s.createElement(m,r({ref:t},c))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,r=new Array(i);r[0]=d;var o={};for(var u in t)hasOwnProperty.call(t,u)&&(o[u]=t[u]);o.originalType=e,o.mdxType="string"==typeof e?e:a,r[1]=o;for(var l=2;l<i;l++)r[l]=n[l];return s.createElement.apply(null,r)}return s.createElement.apply(null,n)}d.displayName="MDXCreateElement"},86414:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>r,default:()=>p,frontMatter:()=>i,metadata:()=>o,toc:()=>l});var s=n(87462),a=(n(67294),n(3905));const i={id:"working-usecases",title:"4. Working with Use Cases",sidebar_label:"4. Working with Use Cases",slug:"/tutorial/working-usecases"},r=void 0,o={unversionedId:"tutorial/working-usecases",id:"tutorial/working-usecases",title:"4. Working with Use Cases",description:"Introduction to the Use Case concept",source:"@site/docs/tutorial/working-usecases.md",sourceDirName:"tutorial",slug:"/tutorial/working-usecases",permalink:"/docs/tutorial/working-usecases",draft:!1,editUrl:"https://github.com/herbsjs/herbsjs.github.io/blob/master/docs/tutorial/working-usecases.md",tags:[],version:"current",frontMatter:{id:"working-usecases",title:"4. Working with Use Cases",sidebar_label:"4. Working with Use Cases",slug:"/tutorial/working-usecases"},sidebar:"sidebar",previous:{title:"3. Creating Entities",permalink:"/docs/tutorial/create-entity"},next:{title:"5. Specs",permalink:"/docs/tutorial/specs"}},u={},l=[{value:"Introduction to the Use Case concept",id:"introduction-to-the-use-case-concept",level:2},{value:"Create List",id:"create-list",level:2},{value:"Use Case Name",id:"use-case-name",level:3},{value:"Request",id:"request",level:3},{value:"Response",id:"response",level:3},{value:"Setup / DI",id:"setup--di",level:3},{value:"Authorize",id:"authorize",level:3},{value:"Steps",id:"steps",level:3},{value:"Exporting",id:"exporting",level:3},{value:"To help you analyze",id:"to-help-you-analyze",level:3},{value:"Auditing",id:"auditing",level:4},{value:"Generate a use case self documentation",id:"generate-a-use-case-self-documentation",level:4},{value:"Next Step",id:"next-step",level:2}],c={toc:l};function p(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,s.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"introduction-to-the-use-case-concept"},"Introduction to the Use Case concept"),(0,a.kt)("p",null,"Previous when we run ",(0,a.kt)("inlineCode",{parentName:"p"},"herbs update")," command, ",(0,a.kt)("inlineCode",{parentName:"p"},"herbs-cli")," generate inside ",(0,a.kt)("inlineCode",{parentName:"p"},"src/domain/usecases")," a folder for each entity we have created."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"src\n\u2514\u2500\u2500 domain\n    \u2514\u2500\u2500 usecases\n        \u251c\u2500\u2500 item\n        \u2514\u2500\u2500 list\n")),(0,a.kt)("p",null,"Inside these folders named after each entity we will find two types of files, the use cases and the files that have ",(0,a.kt)("inlineCode",{parentName:"p"},".spec")," in the name."),(0,a.kt)("p",null,"Now we will talk about the use cases, and in the next step of the tutorial we will talk about the ",(0,a.kt)("inlineCode",{parentName:"p"},".spec")," files."),(0,a.kt)("p",null,"Every file without ",(0,a.kt)("inlineCode",{parentName:"p"},".spec")," performs a specific action, for exemple: Find List, Create List, Remove List, Find Item, Add Item ...."),(0,a.kt)("p",null,"Each of these specific actions, are our ",(0,a.kt)("strong",{parentName:"p"},"use cases"),", and each of them, reflects an action exposed by the Domain to the end user."),(0,a.kt)("p",null,"Internally, a use case is responsible for controlling the interaction between entities, repositories and other domain components."),(0,a.kt)("p",null,"Now, let's understand a use case structure, but to se more about use cases visit: ",(0,a.kt)("a",{parentName:"p",href:"/docs/usecase/getting-started#whats-a-use-case"},"What's a Use Case?")),(0,a.kt)("p",null,"We are going to take a look in ",(0,a.kt)("inlineCode",{parentName:"p"},"createList.js")," use case thats interact with the List entity, remember that this use case file is auto generated in previous step when we run ",(0,a.kt)("inlineCode",{parentName:"p"},"herbs update"),"."),(0,a.kt)("h2",{id:"create-list"},"Create List"),(0,a.kt)("p",null,"Let's understand the use case to create a list that is generated by the CLI. For that, we are going to walk through the following topics:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Use Case Name"),(0,a.kt)("li",{parentName:"ul"},"Request "),(0,a.kt)("li",{parentName:"ul"},"Response"),(0,a.kt)("li",{parentName:"ul"},"Setup / DI"),(0,a.kt)("li",{parentName:"ul"},"Authorize"),(0,a.kt)("li",{parentName:"ul"},"Steps - Basic"),(0,a.kt)("li",{parentName:"ul"},"Step return (Ok, Err)"),(0,a.kt)("li",{parentName:"ul"},"Use Case return (ctx.ret)"),(0,a.kt)("li",{parentName:"ul"},"Exporting with herbarium")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Learn more about ",(0,a.kt)("a",{parentName:"p",href:"/docs/usecase/features#creating-a-use-case"},"create usecases"),".")),(0,a.kt)("h3",{id:"use-case-name"},"Use Case Name"),(0,a.kt)("p",null,"First, the name is set for the usecase."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"// src/domain/usecases/user/createList.js\nconst { usecase } = require('@herbsjs/herbs')\n\nconst createList = injection => usecase('Create List', {})\n")),(0,a.kt)("h3",{id:"request"},"Request"),(0,a.kt)("p",null,"Now, we have to specify what are the parameters accepted from the user on request."),(0,a.kt)("p",null,"In this case, we need lits's name and description, which are both ",(0,a.kt)("inlineCode",{parentName:"p"},"String")," since we want a text."),(0,a.kt)("p",null,"Here we can use any other ",(0,a.kt)("inlineCode",{parentName:"p"},"Object")," type, like: ",(0,a.kt)("inlineCode",{parentName:"p"},"Boolean"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"Number"),", etc. To set up an array, we have to add brackets around the type, like: ",(0,a.kt)("inlineCode",{parentName:"p"},"[String]"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"// src/domain/usecases/list/createList.js\nconst { usecase } = require('@herbsjs/herbs')\n\nconst createList = injection => usecase('Create List', {\n    // Input/Request metadata and validation \n    request: {\n        name: String,\n        description: String\n    },\n})\n")),(0,a.kt)("p",null,"If we were using an Entity in the request field, the validations set in the Entity will also be checked there."),(0,a.kt)("h3",{id:"response"},"Response"),(0,a.kt)("p",null,"Once we have the request object specified, we must specify the response model."),(0,a.kt)("p",null,"If your use case does not need to return a response and just perform operations, you can ommit this field."),(0,a.kt)("p",null,"In this case, it will return the List Entity."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"// src/domain/usecases/list/createList.js\nconst { usecase } = require('@herbsjs/herbs')\nconst List = require('../entities/list');\n\nconst createList = injection => usecase('Create List', {\n    // Input/Request metadata and validation \n    request: {\n        name: String,\n        description: String\n    },\n\n    // Output/Response metadata\n    response: List,\n})\n")),(0,a.kt)("h3",{id:"setup--di"},"Setup / DI"),(0,a.kt)("p",null,"The use case is divided by steps, they run one-by-one and can share a context object. You are free to use this object setting useful values between the steps. Besides that, you can also have an initial object setup, where you can set initially required values for steps, like repositories (it's what makes possible the interaction with the database)."),(0,a.kt)("p",null,'In each use case step (which we are going to set soon), a context object is provided to handle the "data sharing" between different steps. And other useful data, such as repositories, the request values, etc.'),(0,a.kt)("p",null,"On the ",(0,a.kt)("inlineCode",{parentName:"p"},"setup")," function, we can manually add values to this context, so we can use them later in the steps."),(0,a.kt)("p",null,"In this case of the CLI, it was not necessary, but wel could do something like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"// src/domain/usecases/list/createList.js\nconst { usecase } = require('@herbsjs/herbs')\nconst List = require('../entities/list');\nconst ListRepository = require('../../../infra/data/repositories/listRepository')\n\nconst dependency = { ListRepository }\n\nconst createList = injection => usecase('Create List', {\n    // Input/Request metadata and validation \n    request: {\n        name: String,\n        description: String\n    },\n\n    // Output/Response metadata\n    response: List,\n\n    // Pre-run setup\n    setup: ctx => (ctx.di = Object.assign({}, dependency, injection)),\n})\n")),(0,a.kt)("h3",{id:"authorize"},"Authorize"),(0,a.kt)("p",null,"Use cases may also have an ",(0,a.kt)("inlineCode",{parentName:"p"},"authorize")," function, which can be implemented with any logic and must return ",(0,a.kt)("inlineCode",{parentName:"p"},"Ok()")," if user is authorized to perform that operation and ",(0,a.kt)("inlineCode",{parentName:"p"},"Err()")," otherwise."),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"authorize")," function is runned before any use case. Use cases will only run if the ",(0,a.kt)("inlineCode",{parentName:"p"},"authorize")," return ",(0,a.kt)("inlineCode",{parentName:"p"},"Ok()"),"."),(0,a.kt)("p",null,"The CLI default function just allows all requests by constant returning ",(0,a.kt)("inlineCode",{parentName:"p"},"Ok()"),", but you can implement any logic for that. For example, we can suppose that the ",(0,a.kt)("inlineCode",{parentName:"p"},"user")," object has a property called ",(0,a.kt)("inlineCode",{parentName:"p"},"canCreateList"),"."),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Learn more: ",(0,a.kt)("a",{parentName:"p",href:"/docs/usecase/features#authorize"},"Use Cases Features - Authorize"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"// src/domain/usecases/list/createList.js\nconst { Ok, Err, usecase } = require('@herbsjs/herbs')\nconst List = require('../entities/list');\n\nconst createList = injection => usecase('Create List', {\n    // Input/Request metadata and validation \n    request: {\n        name: String,\n        description: String\n    },\n\n    // Output/Response metadata\n    response: List,\n\n    // Authorization with Audit\n    // authorize: (user) => (user.canCreateList ? Ok() : Err()),\n    authorize: () => Ok(),\n})\n")),(0,a.kt)("p",null,"In every use case, you can set up the ",(0,a.kt)("inlineCode",{parentName:"p"},"authorize")," which gets a ",(0,a.kt)("inlineCode",{parentName:"p"},"user")," object and must return ",(0,a.kt)("inlineCode",{parentName:"p"},"Ok")," for authorized and ",(0,a.kt)("inlineCode",{parentName:"p"},"Err")," for unauthorized."),(0,a.kt)("p",null,"It is simple like that, you can implement any logic and if ",(0,a.kt)("inlineCode",{parentName:"p"},"Ok")," were returned the use case keep running, but if ",(0,a.kt)("inlineCode",{parentName:"p"},"Err")," were returned, the use case is interrupted."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const createList = injection => usecase('Create List', {\n    // Input/Request metadata and validation \n    request: {\n        name: String,\n        description: String\n    },\n\n    // Output/Response metadata\n    response: List,\n\n    // Authorization with Audit\n    authorize: async (user) => (user.canCreateList ? Ok() : Err()),\n    ...\n")),(0,a.kt)("h3",{id:"steps"},"Steps"),(0,a.kt)("p",null,"Since we have the request, response, setup and authorization set, we can finally start writing the actual logic in the steps."),(0,a.kt)("p",null,"Steps are the building blocks of a use case. Their main goal is to generate metadata before and during use case execution like the code intention, audit trail, etc. The first thing to note is that we encourage steps description with the business intent (never the technical intent)."),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Learn more about ",(0,a.kt)("a",{parentName:"p",href:"/docs/usecase/steps"},"usecase steps"),".")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"// src/domain/usecases/list/createList.js\nconst { Ok, Err, usecase } = require('@herbsjs/herbs')\nconst List = require('../entities/list');\nconst ListRepository = require('../../../infra/data/repositories/listRepository')\n\nconst dependency = { ListRepository }\n\n// Here, we receive an object `injection` with the dependencies we will need it.\n// So we can interact with the database.\nconst createList = injection => usecase('Create List', {\n    // Input/Request metadata and validation \n    request: {\n        name: String,\n        description: String\n    },\n\n    // Output/Response metadata\n    response: List,\n\n    // Authorization with Audit\n    authorize: async (user) => (user.canCreateList ? Ok() : Err()),\n\n    // Pre-run setup - will inject in context object ListRepository\n    setup: ctx => (ctx.di = Object.assign({}, dependency, injection)),\n\n    // Step description and function\n    'Check if the List is valid': step(ctx => {\n        // Creates a new list from the request.\n        // And stores it in the context.\n        ctx.list = List.fromJSON(ctx.req)\n\n        // Check if the fields are valid.\n        if (!ctx.list.isValid())\n            return UserNotValidError('List ', 'The List entity is invalid', ctx.list.errors)\n\n        // returning Ok continues to the next step. Err stops the use case execution.\n        return Ok()\n    }),\n\n    'Save the List': step(async ctx => {\n        // instances a repository to store data from di (dependency injection)\n        const repo = new ctx.di.ListRepository(injection)\n\n        // get previus validate list from context\n        const list = ctx.list\n        \n        // Insert the new list to the repository\n        // and then return it to the client using\n        // the `ret` property of context object.\n        // ctx.ret is the return value of a use case\n        return (ctx.ret = await repo.insert(list))\n    })\n})\n")),(0,a.kt)("h3",{id:"exporting"},"Exporting"),(0,a.kt)("p",null,"As we previous make with entities, exporting throught herbarium, we'll make the same for usecases, but have some changes, we defined in metadata a new type of operation, ",(0,a.kt)("inlineCode",{parentName:"p"},"herbarium.crud.create"),"."),(0,a.kt)("p",null,"It's a important attention point, because is this way, where we make usecase known for application and make it avaible to receive request throught GragphQL or Rest."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"module.exports =\n  herbarium.usecases\n    .add(createList, 'CreateList')\n    .metadata({ group: 'List', operation: herbarium.crud.create, entity: List })\n    .usecase\n")),(0,a.kt)("h3",{id:"to-help-you-analyze"},"To help you analyze"),(0,a.kt)("p",null,"To help you in your daily development routine, in the metadata analysis of a use case,\nlet's take a brief look at .auditTrail and .doc()"),(0,a.kt)("h4",{id:"auditing"},"Auditing"),(0,a.kt)("p",null,"You can retrieve useful information about a use case execution with ",(0,a.kt)("inlineCode",{parentName:"p"},"usecase.auditTrail"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const request = { name: 'The best list' }\n\n// Run the use case\nconst response = await createListt.run(request)\n\n// Log their information\nconsole.log(createListt.auditTrail)\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},"{\n    // object type\n    type: 'use case',\n    \n    // use ase description\n    description: 'Create List',\n    \n    // unique Id for each use case execution\n    transactionId: '9985fb70-f56d-466a-b466-e200d1d4848c', \n    \n    // total use case execution time in nanosecods\n    elapsedTime: 1981800n, \n\n    // the same user (object) provided on `usecase.authorize(user)`\n    user: { name: 'John', id: '923b8b9a', isAdmin: true },\n\n    // `usecase.authorize(user)` return\n    authorized: true,\n\n    // use case request\n    request: { name: 'The best list', description: 'simple todo list' },\n    \n    // use case result\n    return: {\n        Ok: { id: 1, name: 'The best list', description: 'simple todo list' }\n    },\n\n    // steps\n    steps: [\n        { \n            // object type\n            type: 'step', \n            \n            // use ase description\n            description: 'Check if the List is valid', \n            \n            // total step execution time in nanosecods\n            elapsedTime: 208201n , \n            \n            // step result\n            return: {} \n        },\n        ...\n    ]\n}\n")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Refer to ",(0,a.kt)("a",{parentName:"p",href:"../usecase/features#audit"},"Audit with HerbsJS")," to know more.")),(0,a.kt)("h4",{id:"generate-a-use-case-self-documentation"},"Generate a use case self documentation"),(0,a.kt)("p",null,"You can also use ",(0,a.kt)("inlineCode",{parentName:"p"},"uc.doc()")," to get an Object like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},"{\n  type: 'use case',\n  description: 'Create List',\n  request: { name: String, description: String },\n  response: List,\n  steps: [\n    { type: 'step', description: 'Check if the List is valid', steps: null },\n  ]\n}\n")),(0,a.kt)("h2",{id:"next-step"},"Next Step"),(0,a.kt)("p",null,"HerbsJs provides us with a quick way to create api's, notice that after we created our entities, we ran the 'herbs-update' command and the 'herbs-cli' did the heavy lifting by creating the use case files needed to perform the CRUD operations. "),(0,a.kt)("p",null,"In this step we saw createList.js and how use cases works, with this example you will be able to adapt any use case that was generated or create new ones."),(0,a.kt)("p",null,"Our next step is to learn about the '.spec' and how to use it."))}p.isMDXComponent=!0}}]);