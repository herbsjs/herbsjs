"use strict";(self.webpackChunkherbjs_website=self.webpackChunkherbjs_website||[]).push([[6799],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>m});var r=n(67294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,s=function(e,t){if(null==e)return{};var n,r,s={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var c=r.createContext({}),u=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},l=function(e){var t=u(e.components);return r.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,s=e.mdxType,o=e.originalType,c=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),d=u(n),m=s,h=d["".concat(c,".").concat(m)]||d[m]||p[m]||o;return n?r.createElement(h,a(a({ref:t},l),{},{components:n})):r.createElement(h,a({ref:t},l))}));function m(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var o=n.length,a=new Array(o);a[0]=d;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:s,a[1]=i;for(var u=2;u<o;u++)a[u]=n[u];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},73797:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>u});var r=n(87462),s=(n(67294),n(3905));const o={id:"development",title:"Development Best Practices",sidebar_label:"Development Best Practices",slug:"/project/development-guides",custom_edit_url:null},a=void 0,i={unversionedId:"project/development",id:"project/development",title:"Development Best Practices",description:"Defining the name of your usecase",source:"@site/docs/project/development-guidelines.md",sourceDirName:"project",slug:"/project/development-guides",permalink:"/docs/project/development-guides",draft:!1,editUrl:null,tags:[],version:"current",frontMatter:{id:"development",title:"Development Best Practices",sidebar_label:"Development Best Practices",slug:"/project/development-guides",custom_edit_url:null},sidebar:"sidebar",previous:{title:"Architecture guidelines",permalink:"/docs/project/architecture-guidelines"},next:{title:"The Herbs Ecosystem",permalink:"/docs/project/ecosystem"}},c={},u=[{value:"Defining the name of your usecase",id:"defining-the-name-of-your-usecase",level:2},{value:"<strong>Creating custom methods in the repository</strong>",id:"creating-custom-methods-in-the-repository",level:2},{value:"Handling usecase failures",id:"handling-usecase-failures",level:2},{value:"Creating the business rules workflow",id:"creating-the-business-rules-workflow",level:2},{value:"Creating know errors",id:"creating-know-errors",level:2}],l={toc:u};function p(e){let{components:t,...n}=e;return(0,s.kt)("wrapper",(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h2",{id:"defining-the-name-of-your-usecase"},"Defining the name of your usecase"),(0,s.kt)("p",null,"The name of the usecase must be something that refers to the business, making its real purpose clear to the business team."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Good descriptions:")),(0,s.kt)("p",null,"\u2705 Search one or several funds"),(0,s.kt)("p",null,"\u2705 Filter users by document"),(0,s.kt)("p",null,"\u2705 Update unit price"),(0,s.kt)("p",null,"\u2705 Find the funds in Bank"),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Bad descriptions:")),(0,s.kt)("p",null,"\u274c list the information"),(0,s.kt)("p",null,"\u274c Calculates the percentage of the fund"),(0,s.kt)("p",null,"\u274c calculates the total"),(0,s.kt)("p",null,"\u274c Save user in bank"),(0,s.kt)("p",null,"\u274c Update Client"),(0,s.kt)("p",null,"\u274c Starts the services and returns the JobId"),(0,s.kt)("p",null,"Reference: ",(0,s.kt)("a",{parentName:"p",href:"https://herbsjs.org/docs/usecase/features/#creating-a-use-case"},"https://herbsjs.org/docs/usecase/features/#creating-a-use-case")),(0,s.kt)("h2",{id:"creating-custom-methods-in-the-repository"},(0,s.kt)("strong",{parentName:"h2"},"Creating custom methods in the repository")),(0,s.kt)("p",null,"To create a non-standard / custom query for your repository, we can call knex directly, without the need to create a new variable and call it in the constructor."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Don't: create a variable to receive the connection")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-jsx"},"// Don't\n\nclass UserRepository extends Repository {\n    constructor(injection) {\n        super({\n            entity: User,\n            table: \"users\",\n            knex: connection\n        })\n\n        this.conn = connection\n    }\n\n    async getUserByNickName(nickname) {\n        const ret = await this.conn('users').select('*')\n        .where('nickname', nickname)\n       \n        if (!ret[0] || ret[0].length == 0) return undefined\n        return User.fromJSON(ret[0])\n    }\n}\n\n")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Correct: Use this.knex inside your methods")),(0,s.kt)("p",null,"Call ",(0,s.kt)("strong",{parentName:"p"},"this.knex")," directly in our methods"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-jsx"},"// Do\n\nclass UserRepository extends Repository {\n    constructor(injection) {\n        super({\n            entity: User,\n            table: \"users\",\n            knex: connection\n        })\n    }\n\n    async getUserByNickName(nickname) {\n        const ret = await this.knex('users').select('*')\n         .where('nickname', nickname)\n\n        if (!ret[0] || ret[0].length == 0) return undefined\n        return User.fromJSON(ret[0])\n    }\n}\n\n")),(0,s.kt)("h2",{id:"handling-usecase-failures"},"Handling usecase failures"),(0,s.kt)("p",null,"To carry out the treatment of errors that occurred during the execution of the usecase, enable the environment variable ",(0,s.kt)("a",{parentName:"p",href:"https://herbsjs.org/docs/usecase/features/"},"HERBS_EXCEPTION")," in the production environments so that Herbs can obfuscate the errors generated and handle it on its return."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-jsx"},"// Don't\nconst createProduct = injection =>\n    usecase('Create Product', {\n\n        request: {\n            name: String,\n            ...\n        },\n\n        response: {\n            product: Product\n        },\n\n        'Check if the Product is valid': step(ctx => {\n           try {\n                if (!isValid) return Err(errors)\n                return Ok()\n            }\n            catch(e) {\n                throw new \"Error to validated product\"\n            }\n        }),\n\n        'Save the Product to the repository': step(async ctx => {\n            try {\n                ctx.ret.product = await repo.insert(product)\n                return Ok()\n            }\n            catch(e) {\n                throw new \"Error to save product\"\n            }\n        }),\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-jsx"},"// Do\n\nHERBS_EXCEPTION = audit\n\nconst createProduct = injection =>\n    usecase('Create Product', {\n\n        request: {\n            name: String,\n            ...\n        },\n\n        response: {\n            product: Product\n        },\n\n        'Check if the Product is valid': step(ctx => {\n            if (!isValid) return Err(errors)\n            return Ok()\n        }),\n\n        'Save the Product to the repository': step(async ctx => {\n            ctx.ret.product = await repo.insert(product)\n            return Ok()\n        }),\n")),(0,s.kt)("h2",{id:"creating-the-business-rules-workflow"},"Creating the business rules workflow"),(0,s.kt)("p",null,"Use ",(0,s.kt)("inlineCode",{parentName:"p"},"IfElse")," to direct your flow of business rules, making your code easier to understand and document."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-jsx"},"// Don't\n\nconst updateItem = (injection) =>\n  usecase('Update Task', {\n\n    ...\n    \n    'Check if it is necessary to update Task positions': step(ctx => {\n        if(ctx.hasChangedPosition)\n        ...\n        else\n        ...\n    }),\n\n    }),\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-jsx"},"// Do\n\nconst updateItem = (injection) =>\n  usecase('Update Task', {\n\n    ...\n    \n    'Check if is necessary to update Task positions': ifElse({\n\n      'If position has changed': step(ctx => {\n        return Ok(ctx.hasChangedPosition) // true or false\n      }),\n\n      'Then rearrange positions and save Tasks on repository': step(async ctx => {\n        ...\n        return Ok()\n      }),\n\n      'Else save updated Task on repository': step(async ctx => {\n        ...\n        return Ok()\n      }),\n\n    }),\n")),(0,s.kt)("h2",{id:"creating-know-errors"},"Creating know errors"),(0,s.kt)("p",null,"User Known Errors to expose runtime metadata. With this runtime information the glues like Herbs2REST or Herbs2GraphQL are able to change the API return."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-jsx"},"// Don't\nconst createProduct = injection => usecase('Create Product', {\n    'Check if the Product is valid': step(ctx => {\n        ...\n        if (!isValid) throw 'Product not found'\n    }),\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-jsx"},"// Do\nconst createProduct = injection => usecase('Create Product', {\n    'Check if the Product is valid': step(ctx => {\n        ...\n        if (!isValid) {\n            const options = { message: Product ID ${id} not found, payload: { entity: 'product' } }\n            return Err.notFound(options) // return an Err with \"not found\" code\n        }\n}),\n")),(0,s.kt)("p",null,"To learn more about know errors, you can open this link ",(0,s.kt)("a",{parentName:"p",href:"https://herbsjs.org/docs/usecase/result#known-errors"},"known-errors")))}p.isMDXComponent=!0}}]);