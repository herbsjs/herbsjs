"use strict";(self.webpackChunkherbjs_website=self.webpackChunkherbjs_website||[]).push([[6799],{3905:(e,n,t)=>{t.d(n,{Zo:()=>l,kt:()=>m});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},s=Object.keys(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=r.createContext({}),u=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},l=function(e){var n=u(e.components);return r.createElement(c.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,s=e.originalType,c=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),d=u(t),m=o,h=d["".concat(c,".").concat(m)]||d[m]||p[m]||s;return t?r.createElement(h,a(a({ref:n},l),{},{components:t})):r.createElement(h,a({ref:n},l))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var s=t.length,a=new Array(s);a[0]=d;var i={};for(var c in n)hasOwnProperty.call(n,c)&&(i[c]=n[c]);i.originalType=e,i.mdxType="string"==typeof e?e:o,a[1]=i;for(var u=2;u<s;u++)a[u]=t[u];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},73797:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>p,frontMatter:()=>s,metadata:()=>i,toc:()=>u});var r=t(87462),o=(t(67294),t(3905));const s={id:"development",title:"Development Best Practices",sidebar_label:"Development Best Practices",slug:"/project/development-guides",custom_edit_url:null},a=void 0,i={unversionedId:"project/development",id:"project/development",title:"Development Best Practices",description:"Defining the name of your usecase",source:"@site/docs/project/development-guidelines.md",sourceDirName:"project",slug:"/project/development-guides",permalink:"/docs/project/development-guides",draft:!1,editUrl:null,tags:[],version:"current",frontMatter:{id:"development",title:"Development Best Practices",sidebar_label:"Development Best Practices",slug:"/project/development-guides",custom_edit_url:null}},c={},u=[{value:"Defining the name of your usecase",id:"defining-the-name-of-your-usecase",level:2},{value:"<strong>Creating custom methods in the repository</strong>",id:"creating-custom-methods-in-the-repository",level:2},{value:"Handling usecase failures",id:"handling-usecase-failures",level:2},{value:"Creating the business rules workflow",id:"creating-the-business-rules-workflow",level:2},{value:"Creating know errors",id:"creating-know-errors",level:2}],l={toc:u};function p(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,r.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"defining-the-name-of-your-usecase"},"Defining the name of your usecase"),(0,o.kt)("p",null,"The name of the usecase must be something that refers to the business, making its real purpose clear to the business team."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Good descriptions:")),(0,o.kt)("p",null,"\u2705 Search one or several funds"),(0,o.kt)("p",null,"\u2705 Filter users by document"),(0,o.kt)("p",null,"\u2705 Update unit price"),(0,o.kt)("p",null,"\u2705 Find the funds in Bank"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Bad descriptions:")),(0,o.kt)("p",null,"\u274c list the information"),(0,o.kt)("p",null,"\u274c Calculates the percentage of the fund"),(0,o.kt)("p",null,"\u274c calculates the total"),(0,o.kt)("p",null,"\u274c Save user in bank"),(0,o.kt)("p",null,"\u274c Update Client"),(0,o.kt)("p",null,"\u274c Starts the services and returns the JobId"),(0,o.kt)("p",null,"Reference: ",(0,o.kt)("a",{parentName:"p",href:"https://herbsjs.org/docs/usecase/features/#creating-a-use-case"},"https://herbsjs.org/docs/usecase/features/#creating-a-use-case")),(0,o.kt)("h2",{id:"creating-custom-methods-in-the-repository"},(0,o.kt)("strong",{parentName:"h2"},"Creating custom methods in the repository")),(0,o.kt)("p",null,"To create a non-standard / custom query for your repository, we can call knex directly, without the need to create a new variable and call it in the constructor."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Don't: create a variable to receive the connection")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"// Don't\n\nclass UserRepository extends Repository {\n    constructor(injection) {\n        super({\n            entity: User,\n            table: \"users\",\n            knex: connection\n        })\n\n        this.conn = connection\n    }\n\n    async getUserByNickName(nickname) {\n        const ret = await this.conn('users').select('*')\n        .where('nickname', nickname)\n       \n        if (!ret[0] || ret[0].length == 0) return undefined\n        return User.fromJSON(ret[0])\n    }\n}\n\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Correct: Use this.knex inside your methods")),(0,o.kt)("p",null,"Call ",(0,o.kt)("strong",{parentName:"p"},"this.knex")," directly in our methods"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"// Do\n\nclass UserRepository extends Repository {\n    constructor(injection) {\n        super({\n            entity: User,\n            table: \"users\",\n            knex: connection\n        })\n    }\n\n    async getUserByNickName(nickname) {\n        const ret = await this.knex('users').select('*')\n         .where('nickname', nickname)\n\n        if (!ret[0] || ret[0].length == 0) return undefined\n        return User.fromJSON(ret[0])\n    }\n}\n\n")),(0,o.kt)("h2",{id:"handling-usecase-failures"},"Handling usecase failures"),(0,o.kt)("p",null,"To carry out the treatment of errors that occurred during the execution of the usecase, enable the environment variable ",(0,o.kt)("a",{parentName:"p",href:"https://herbsjs.org/docs/usecase/features/"},"HERBS_EXCEPTION")," in the production environments so that Herbs can obfuscate the errors generated and handle it on its return."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"// Don't\nconst createProduct = injection =>\n    usecase('Create Product', {\n\n        request: {\n            name: String,\n            ...\n        },\n\n        response: {\n            product: Product\n        },\n\n        'Check if the Product is valid': step(ctx => {\n           try {\n                if (!isValid) return Err(errors)\n                return Ok()\n            }\n            catch(e) {\n                throw new \"Error to validated product\"\n            }\n        }),\n\n        'Save the Product to the repository': step(async ctx => {\n            try {\n                ctx.ret.product = await repo.insert(product)\n                return Ok()\n            }\n            catch(e) {\n                throw new \"Error to save product\"\n            }\n        }),\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"// Do\n\nHERBS_EXCEPTION = audit\n\nconst createProduct = injection =>\n    usecase('Create Product', {\n\n        request: {\n            name: String,\n            ...\n        },\n\n        response: {\n            product: Product\n        },\n\n        'Check if the Product is valid': step(ctx => {\n            if (!isValid) return Err(errors)\n            return Ok()\n        }),\n\n        'Save the Product to the repository': step(async ctx => {\n            ctx.ret.product = await repo.insert(product)\n            return Ok()\n        }),\n")),(0,o.kt)("h2",{id:"creating-the-business-rules-workflow"},"Creating the business rules workflow"),(0,o.kt)("p",null,"Use ",(0,o.kt)("inlineCode",{parentName:"p"},"IfElse")," to direct your flow of business rules, making your code easier to understand and document."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"// Don't\n\nconst updateItem = (injection) =>\n  usecase('Update Task', {\n\n    ...\n    \n    'Check if it is necessary to update Task positions': step(ctx => {\n        if(ctx.hasChangedPosition)\n        ...\n        else\n        ...\n    }),\n\n    }),\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"// Do\n\nconst updateItem = (injection) =>\n  usecase('Update Task', {\n\n    ...\n    \n    'Check if is necessary to update Task positions': ifElse({\n\n      'If position has changed': step(ctx => {\n        return Ok(ctx.hasChangedPosition) // true or false\n      }),\n\n      'Then rearrange positions and save Tasks on repository': step(async ctx => {\n        ...\n        return Ok()\n      }),\n\n      'Else save updated Task on repository': step(async ctx => {\n        ...\n        return Ok()\n      }),\n\n    }),\n")),(0,o.kt)("h2",{id:"creating-know-errors"},"Creating know errors"),(0,o.kt)("p",null,"User Known Errors to expose runtime metadata. With this runtime information the glues like Herbs2REST or Herbs2GraphQL are able to change the API return."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"// Don't\nconst createProduct = injection => usecase('Create Product', {\n    'Check if the Product is valid': step(ctx => {\n        ...\n        if (!isValid) throw 'Product not found'\n    }),\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"// Do\nconst createProduct = injection => usecase('Create Product', {\n    'Check if the Product is valid': step(ctx => {\n        ...\n        if (!isValid) {\n            const options = { message: Product ID ${id} not found, payload: { entity: 'product' } }\n            return Err.notFound(options) // return an Err with \"not found\" code\n        }\n}),\n")),(0,o.kt)("p",null,"To learn more about know errors, you can open this link ",(0,o.kt)("a",{parentName:"p",href:"https://herbsjs.org/docs/usecase/result#known-errors"},"known-errors")))}p.isMDXComponent=!0}}]);