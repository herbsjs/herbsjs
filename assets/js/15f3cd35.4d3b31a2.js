"use strict";(self.webpackChunkherbjs_website=self.webpackChunkherbjs_website||[]).push([[2738],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return m}});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=p(n),m=i,g=u["".concat(l,".").concat(m)]||u[m]||c[m]||r;return n?a.createElement(g,o(o({ref:t},d),{},{components:n})):a.createElement(g,o({ref:t},d))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var p=2;p<r;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},49456:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return l},default:function(){return m},frontMatter:function(){return s},metadata:function(){return p},toc:function(){return c}});var a=n(87462),i=n(63366),r=(n(67294),n(3905)),o=["components"],s={id:"herbs2mongo",title:"Mongo - Herbs2mongo",sidebar_label:"Mongo",slug:"/glues/Herbs2mongo"},l=void 0,p={unversionedId:"glues/herbs2mongo",id:"glues/herbs2mongo",title:"Mongo - Herbs2mongo",description:"[BETA]",source:"@site/docs/glues/herbs2mongo.md",sourceDirName:"glues",slug:"/glues/Herbs2mongo",permalink:"/docs/glues/Herbs2mongo",editUrl:"https://github.com/herbsjs/herbsjs.github.io/blob/master/docs/glues/herbs2mongo.md",tags:[],version:"current",frontMatter:{id:"herbs2mongo",title:"Mongo - Herbs2mongo",sidebar_label:"Mongo",slug:"/glues/Herbs2mongo"},sidebar:"sidebar",previous:{title:"Knex",permalink:"/docs/glues/Herbs2knex"},next:{title:"REPL",permalink:"/docs/glues/herbs2repl"}},d={},c=[{value:"Installing",id:"installing",level:3},{value:"Using",id:"using",level:3},{value:"What is a Repository?",id:"what-is-a-repository",level:3},{value:"Herbs2mongo Repository",id:"herbs2mongo-repository",level:3},{value:"Why Mongo oficial Driver?",id:"why-mongo-oficial-driver",level:3},{value:"Repository setup",id:"repository-setup",level:3},{value:"Retrieving and Persisting Data",id:"retrieving-and-persisting-data",level:2},{value:"find",id:"find",level:3},{value:"findByID",id:"findbyid",level:3},{value:"insert",id:"insert",level:3},{value:"insertMany",id:"insertmany",level:3},{value:"update",id:"update",level:3},{value:"updateMany",id:"updatemany",level:3},{value:"deleteByID",id:"deletebyid",level:3},{value:"deleteMany",id:"deletemany",level:3},{value:"delete",id:"delete",level:3}],u={toc:c};function m(e){var t=e.components,n=(0,i.Z)(e,o);return(0,r.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"[BETA]"),(0,r.kt)("p",null,"herbs2mongo creates repositories to retrieve and store ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/herbsjs/gotu"},"Entities")," using ",(0,r.kt)("a",{parentName:"p",href:"https://docs.mongodb.com/drivers/node/current/"},"Mongo"),"."),(0,r.kt)("h3",{id:"installing"},"Installing"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"$ npm install @herbsjs/herbs2mongo\n")),(0,r.kt)("h3",{id:"using"},"Using"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"connection.js")," - MongoDB initialization:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const { MongoClient,Logger } = require('mongodb')\nconst config = require('./config')\n\nlet dbInstance = null\n\nmodule.exports = async () => {\n  if (dbInstance) {\n      return new Promise((resolve) => resolve(dbInstance))\n  }\n  const client = await new MongoClient(config.connectionString, {\n      useNewUrlParser: true,\n      useUnifiedTopology: true\n  }).connect()\n  dbInstance = client.db(config.databaseName)\n  Logger.setLevel(\"debug\") // set this if you want to debug all queries\n  return dbInstance\n}\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"itemRepository.js")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const { Repository } = require('@herbsjs/herbs2mongo')\nconst connection = require('connection')\nconst { Item } = require('../domain/entities/item')\nconst database = 'herbs2mongo_testdb'\n\nclass ItemRepository extends Repository {\n    constructor() {\n        super({\n            entity: Item,\n            collection: 'aCollection',\n            database,\n            ids: ['id'],\n            mongodb: await connection()\n        })\n    }\n\n    excludedItemFromLastWeek() {\n        ...\n    }\n}\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"someUsecase.js")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const repo = new ItemRepository()\nconst ret = await repo.findByID('60edc25fc39277307ca9a7ff')\n")),(0,r.kt)("h3",{id:"what-is-a-repository"},"What is a Repository?"),(0,r.kt)("p",null,"A repository, by ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Domain-driven_design#Building_blocks"},"definition"),", is part of the layer to retrieve and store entities abstracting the underlying implementation. By using repositories, details of these implementation such as relational database, document-oriented databases, etc., should not leak to the domain code. In other words, no raw SQL queries on your use case or entity files."),(0,r.kt)("h3",{id:"herbs2mongo-repository"},"Herbs2mongo Repository"),(0,r.kt)("p",null,"In order to boost productivity, herbs2Mongo provides way to dynamically generate a repository class based on your Entities and other metadata."),(0,r.kt)("p",null,"These metadata are necessary to close the gap between OOP concepts and paradigms and those of relational databases. For example, it is necessary to specify primary keys and foreign keys as these information do not exist in the description of your domain."),(0,r.kt)("p",null,"Following Herbs architecture principals, it is not the intention of this lib to create yet another ODM or query builder but to create a bridge between your domain and an existing one (from Mongo)."),(0,r.kt)("h3",{id:"why-mongo-oficial-driver"},"Why Mongo oficial Driver?"),(0,r.kt)("p",null,"herbs2Mongo is just one of many bridges possible between Herbs and other packages.\nThe advantage of using Mongo is that is a simple and flexible way to retrieve data from MongoDB, as a plus we're using the oficial driver from MongoDB here."),(0,r.kt)("h3",{id:"repository-setup"},"Repository setup"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const { Repository } = require('@herbsjs/herbs2mongo')\nconst connection = require('connection')  // Mongo initialize instance\nconst { ProductItem } = require('../domain/entities/productItem')\nconst database = 'herbs2mongo_testdb'\n\nclass YourRepository extends Repository {\n    constructor() {\n        super({\n            entity: ProductItem,\n            collection: 'product_items',\n            database,\n            ids: ['id'],\n            mongodb: await connection()\n        })\n    }\n}\n}\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"entity")," - The ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/herbsjs/gotu"},"Entity")," to be used as reference "),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"entity: ProductItem\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"collection")," - The name of the collection in database"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"table: 'product_items'\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"database")," - The name of the database"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"database: 'herbs2mongo_testdb'\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"ids")," - Primary keys"),(0,r.kt)("p",{parentName:"li"},"  Format: ",(0,r.kt)("inlineCode",{parentName:"p"},"['fieldName', 'fieldName', ...]")),(0,r.kt)("p",{parentName:"li"},"  There must be corresponding fields in the entity."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"ids: ['id']  // productItem.id\n")),(0,r.kt)("p",{parentName:"li"},"  or for composite primary key: "),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"ids: [`customerId`, `productId`]  // productItem.customerId , productItem.productId\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"mongoDB")," - mongoDB driver initialize instance"),(0,r.kt)("p",{parentName:"li"},"  Check mongoDB ",(0,r.kt)("a",{parentName:"p",href:"https://docs.mongodb.com/drivers/node/v3.6/"},"documentation")))),(0,r.kt)("h2",{id:"retrieving-and-persisting-data"},"Retrieving and Persisting Data"),(0,r.kt)("h3",{id:"find"},"find"),(0,r.kt)("p",null,"Find entities"),(0,r.kt)("p",null,"Format: ",(0,r.kt)("inlineCode",{parentName:"p"},".find(options)")," where ",(0,r.kt)("inlineCode",{parentName:"p"},"id")," is an optional object containing ",(0,r.kt)("inlineCode",{parentName:"p"},"{ limit, skip, orderBy, filter }"),"."),(0,r.kt)("p",null,"Return: Entity array"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const repo = new ItemRepository(injection)\nconst ret = await repo.find()\n")),(0,r.kt)("p",null,"Options:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"limit"),"  Adds a limit clause to the query.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const repo = new ItemRepository(injection)\nconst ret = await repo.find({ limit: 10 })\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"skip")," Adds a skip clause to the query..")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const repo = new ItemRepository(injection)\nconst ret = await repo.find({ skip: 5 })\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"orderBy")," Adds an order by clause to the query. Column can be string, or list mixed with string and object...")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const repo = new ItemRepository(injection)\nconst ret = await repo.find({ orderBy: 'description'})\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"filter")," Adds a filter to the query with given values.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'const repo = new ItemRepository(injection)\nconst ret = await repo.find({ filter: { stringTest: ["aString"] } })\n')),(0,r.kt)("h3",{id:"findbyid"},"findByID"),(0,r.kt)("p",null,"Find entities by IDs"),(0,r.kt)("p",null,"Format: ",(0,r.kt)("inlineCode",{parentName:"p"},".findByID(id)")," where ",(0,r.kt)("inlineCode",{parentName:"p"},"id")," is an ObjectId string, this will be changed to _id automaticaly."),(0,r.kt)("p",null,"Return: Entity array"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const repo = new ItemRepository(injection)\nconst ret = await repo.findByID('60edc25fc39277307ca9a7ff')\n")),(0,r.kt)("h3",{id:"insert"},"insert"),(0,r.kt)("p",null,"Insert an Entity into a table."),(0,r.kt)("p",null,"Format: ",(0,r.kt)("inlineCode",{parentName:"p"},".insert(entity)")," where ",(0,r.kt)("inlineCode",{parentName:"p"},"entity")," is an Entity instance with values to be persisted.."),(0,r.kt)("p",null,"Return: The inserted entity with the values from database."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const repo = new ItemRepository(injection)\nconst ret = await repo.insert(aNewEntity)\n")),(0,r.kt)("h3",{id:"insertmany"},"insertMany"),(0,r.kt)("p",null,"Insert an array of Entities into a table."),(0,r.kt)("p",null,"Format: ",(0,r.kt)("inlineCode",{parentName:"p"},".insertMany([entity])")," where ",(0,r.kt)("inlineCode",{parentName:"p"},"[entity]"),"is an array of Entities instances with values to be persisted."),(0,r.kt)("p",null,"Return: The inserted entity with the values from database."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"\nconst aNewArrayofEntities = [\n  givenAnEntity('string one test',false),\n  givenAnEntity('string two test',true)\n]\n\nconst repo = new ItemRepository(injection)\nconst ret = await repo.insertMany(aNewArrayofEntities)\n")),(0,r.kt)("h3",{id:"update"},"update"),(0,r.kt)("p",null,"Update an Entity."),(0,r.kt)("p",null,"Format: ",(0,r.kt)("inlineCode",{parentName:"p"},".update(entity)")," where ",(0,r.kt)("inlineCode",{parentName:"p"},"entity")," is an Entity instance with values to be persisted."),(0,r.kt)("p",null,"Return: The updated entity with the values from database."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const repo = new ItemRepository(injection)\nconst ret = await repo.update(aModifiedEntity)\n")),(0,r.kt)("h3",{id:"updatemany"},"updateMany"),(0,r.kt)("p",null,"Update a group of Entities."),(0,r.kt)("p",null,"Format: ",(0,r.kt)("inlineCode",{parentName:"p"},".updateMany(options)")," where ",(0,r.kt)("inlineCode",{parentName:"p"},"options")," is a set of conditionals and new values to set a group of entities."),(0,r.kt)("p",null,"Return: The updated entity with the values from database."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'const repo = new ItemRepository(injection)\nlet filterDefinition = { id: anEntity.id  }\nlet updateDefinition = { $set: { "stringTest" : "everything works very well" } }\nawait itemRepo.updateMany({ filter: filterDefinition, update: updateDefinition})\n')),(0,r.kt)("h3",{id:"deletebyid"},"deleteByID"),(0,r.kt)("p",null,"Delete an Entity."),(0,r.kt)("p",null,"Format: ",(0,r.kt)("inlineCode",{parentName:"p"},".deleteByID(id)")," where ",(0,r.kt)("inlineCode",{parentName:"p"},"id")," is an ObjectId string, this will be changed to _id automaticaly.."),(0,r.kt)("p",null,"Return: true for success or false for error."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const repo = new ItemRepository(injection)\nlet filterDefinition = {  numberTest : [aModifiedInstance.numberTest] }\nconst ret = await repo.deleteMany({ filter: filterDefinition })\n")),(0,r.kt)("h3",{id:"deletemany"},"deleteMany"),(0,r.kt)("p",null,"Delete a group of Entities."),(0,r.kt)("p",null,"Format: ",(0,r.kt)("inlineCode",{parentName:"p"},".deleteMany(options = { filter})")," where ",(0,r.kt)("inlineCode",{parentName:"p"},"options")," is a set of filters to be deleted."),(0,r.kt)("p",null,"Return: ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," for success or ",(0,r.kt)("inlineCode",{parentName:"p"},"false")," for error"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"\nconst repo = new ItemRepository(injection)\nlet filterDefinition = {  numberTest : [aModifiedInstance.numberTest] }\nconst ret = await repo.deleteMany({ filter: filterDefinition })\n\n")),(0,r.kt)("h3",{id:"delete"},"delete"),(0,r.kt)("p",null,"Delete an Entitie."),(0,r.kt)("p",null,"Format: ",(0,r.kt)("inlineCode",{parentName:"p"},".delete(entity)")," where ",(0,r.kt)("inlineCode",{parentName:"p"},"entity")," is a Entity instance to be deleted."),(0,r.kt)("p",null,"Return: ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," for success or ",(0,r.kt)("inlineCode",{parentName:"p"},"false")," for error"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"\nconst repo = new ItemRepository(injection)\nconst ret = await repo.delete(aModifiedEntity)\n")))}m.isMDXComponent=!0}}]);